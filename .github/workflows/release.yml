name: release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      TERRAGRUNT_VERSION: "0.54.12"

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '^1.21'

    - name: Setup Environment
      run: |
        echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV
        mkdir -p ./artifacts

    - name: Cache Terraform and Terragrunt
      uses: actions/cache@v2
      id: cache-tools
      with:
        path: |
          ./artifacts/terraform
          ./artifacts/terragrunt
        key: ${{ runner.os }}-terraform-terragrunt-${{ env.TERRAGRUNT_VERSION }}

    - name: Check Cache Hit
      run: |
        if [ "${{ steps.cache-tools.outputs.cache-hit }}" == "true" ]; then
          echo "Cache hit, using cached Terraform and Terragrunt binaries."
        else
          echo "Cache miss, downloading Terraform and Terragrunt binaries."
        fi

    - name: Install Terraform (if not cached)
      if: steps.cache-tools.outputs.cache-hit != 'true'
      run: |
        wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install terraform
        sudo mv /usr/bin/terraform ./artifacts/terraform

    - name: Download Terragrunt (if not cached)
      if: steps.cache-tools.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64 -O terragrunt
        chmod +x terragrunt
        sudo mv terragrunt ./artifacts/terragrunt

    - name: Set Ownership and Permissions
      run: |
        sudo chown $(whoami) ./artifacts/*
        chmod 755 ./artifacts/*
        ls -l ./artifacts

    - name: Extract Changelog
      id: changelog
      run: |
        echo "RELEASE_CHANGELOG<<EOF" >> $GITHUB_ENV
        bash tools/changelog.sh >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Build Binary
      run: make build

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ env.VERSION }}"
        release_name: "Release v${{ env.VERSION }}"
        draft: false
        prerelease: false
        body: ${{ env.RELEASE_CHANGELOG }}
        files: |
          build/iterator
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: cloudputation
        password: ${{ secrets.ITERATOR_DOCKER_CI }}

    - name: Run release pipeline
      run: make release

    # - name: Run Goreleaser
    #   run: goreleaser release
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
